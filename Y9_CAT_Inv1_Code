# Year 9 Mathematics Investigation: Computational Algorithms for Modeling Population Growth


# 1.2 Create and explain a reusable means of converting time periods
    # This section implements a reusable way to convert between time periods using a lookup table (dictionary of dictionaries).
    # This table allows conversion between days, half-days, quarter-days, hours, minutes, and seconds.

time_conversion = {
    'day': {'half-day': 2, 'quarter-day': 4, 'hour': 24, 'minute': 1440, 'second': 86400},
    'half-day': {'quarter-day': 2, 'hour': 12, 'minute': 720, 'second': 43200},
    'quarter-day': {'hour': 6, 'minute': 360, 'second': 21600},
    'hour': {'minute': 60, 'second': 3600},
    'minute': {'second': 60}
}

def convert_time_units(amount, from_unit, to_unit):
    """
    Converts an amount from one time unit to another using the lookup table.
    """
    units = ['day', 'half-day', 'quarter-day', 'hour', 'minute', 'second']
    from_index = units.index(from_unit)
    to_index = units.index(to_unit)
    factor = 1
    if from_index < to_index:
        for i in range(from_index, to_index):
            factor *= list(time_conversion[units[i]].values())[0]
    elif from_index > to_index:
        for i in range(to_index, from_index):
            factor /= list(time_conversion[units[i]].values())[0]
    return amount * factor


# PART I: NAIVE VS SOPHISTICATED MODEL COMPARISON
    # 2.1 Prompt as specified and summarise the entered information
    # 2.1.1 Accept a custom fission-event frequency
    # 2.2 Output the correct projected population size and explain your design


