# Year 9 Mathematics Investigation: Computational Algorithms for Modeling Population Growth


# 1.2 Create and explain a reusable means of converting time periods
    # This section implements a reusable way to convert between time periods using a lookup table (dictionary of dictionaries).
    # This table allows conversion between days, half-days, quarter-days, hours, minutes, and seconds.

time_conversion = {
    'day': {'half-day': 2, 'quarter-day': 4, 'hour': 24, 'minute': 1440, 'second': 86400},
    'half-day': {'quarter-day': 2, 'hour': 12, 'minute': 720, 'second': 43200},
    'quarter-day': {'hour': 6, 'minute': 360, 'second': 21600},
    'hour': {'minute': 60, 'second': 3600},
    'minute': {'second': 60}
}

def convert_time_units(amount, from_unit, to_unit):
    """
    Converts an amount from one time unit to another using the lookup table.
    """
    units = ['day', 'half-day', 'quarter-day', 'hour', 'minute', 'second']
    from_index = units.index(from_unit)
    to_index = units.index(to_unit)
    factor = 1
    if from_index < to_index:
        for i in range(from_index, to_index):
            factor *= list(time_conversion[units[i]].values())[0]
    elif from_index > to_index:
        for i in range(to_index, from_index):
            factor /= list(time_conversion[units[i]].values())[0]
    return amount * factor


# PART I: NAIVE VS SOPHISTICATED MODEL COMPARISON

def compare_naive_with_sophisticated():

    # 2.1: Prompt for naive model
    print("Naive population model:")
    initial_population = int(input("Enter the initial population: "))
    growth_rate = float(input("Enter the growth rate (enter 7% as 7): "))
    growth_unit = input("Enter the growth rate time unit (day, half-day, quarter-day, hour, minute): ")

# 2.1: Prompt for sophisticated model
    print("Sophisticated population model:")
    initial_population_s = int(input("Enter the initial population: "))
    growth_rate_s = float(input("Enter the growth rate (enter 7% as 7): "))
    growth_unit_s = input("Enter the growth rate time unit (day, half-day, quarter-day, hour, minute): ")
    # 2.1.1: Accept a custom fission-event frequency
    fission_unit = input("Enter the fission-event frequency time unit (day, half-day, quarter-day, hour, minute, custom): ")
    if fission_unit == "custom":
        fission_events = int(input("Enter the number of fission events per growth rate time unit: "))
    else:
        fission_events = time_conversion[growth_unit_s][fission_unit]

   # 2.1: Summarise input data
    print(f"Naive Model: I = {initial_population}, g = {growth_rate}% per {growth_unit}")
    if fission_unit == "custom":
        print(f"Sophisticated Model: I = {initial_population_s}, g = {growth_rate_s}% per {growth_unit_s}, Fission-event frequency: {fission_events}")
    else:
        print(f"Sophisticated Model: I = {initial_population_s}, g = {growth_rate_s}% per {growth_unit_s}, Fission-event frequency: {fission_unit}")
    print(f"Projection timeframe: {projection_time} {projection_unit}")

 # 2.2: Calculate naive model
    periods = convert_time_units(projection_time, projection_unit, growth_unit)
    naive_population = initial_population + (growth_rate / 100) * initial_population * periods

 # 2.2: Calculate sophisticated model
    if fission_unit == "custom":
        sub_periods = fission_events * periods
        sub_growth_rate = growth_rate_s / fission_events
    else:
        sub_periods = convert_time_units(projection_time, projection_unit, fission_unit)
        sub_growth_rate = growth_rate_s / time_conversion[growth_unit_s][fission_unit]
    sophisticated_population = initial_population_s
    for _ in range(int(sub_periods)):
        sophisticated_population *= (1 + sub_growth_rate / 100)

        
    # 2.2: Output results
    print(f"Naive model projected population size: {round(naive_population, 2)}")
    print(f"Sophisticated model projected population size: {round(sophisticated_population, 2)}")

    
# PART II: TIME FOR A POPULATION TO REACH A TARGET SIZE (3.1, 3.2)

def calculate_time_to_target():

    print("MODULE 2: TIME FOR A POPULATION TO REACH A TARGET SIZE")
    # 3.1: Prompt for all required parameters
    initial_population = int(input("Enter the initial population: "))
    growth_rate = float(input("Enter the growth rate (enter 7% as 7): "))
    growth_unit = input("Enter the growth rate time unit (year, quarter, month, week, day): ")
    fission_unit = input("Enter the fission-event frequency time unit (day, half-day, quarter-day, hour, minute, custom): ")
    if fission_unit == "custom":
        fission_events = int(input("Enter the number of fission events per growth rate time unit: "))
    else:
        fission_events = time_conversion[growth_unit][fission_unit]
    target_population = float(input("Enter the target amount: "))

     # 3.1: Summarise input
    print(f"Sophisticated model: I = {initial_population}, g = {growth_rate}% per {growth_unit}, Fission-event frequency: {fission_events}")
    print(f"Target amount: {target_population}")

    # 3.2: Calculate projection and time taken
    sub_growth_rate = growth_rate / fission_events
    population = initial_population
    projection = [population]
    events = 0
    while population < target_population:
        population *= (1 + sub_growth_rate / 100)
        projection.append(population)
        events += 1
    print("Forward projection:", [round(p, 2) for p in projection])
    print(f"Time taken: {events} {fission_unit if fission_unit != 'custom' else f'{fission_events} per {growth_unit}'}")

# PART III: COMPARE SOPHISTICATED MODELS

def compare_sophisticated_models():
     # Input for First Model
    print("First model:")
    initial_population1 = int(input("Enter the initial population: "))
    growth_rate1 = float(input("Enter the growth rate (enter 7% as 7): "))
    growth_unit1 = input("Enter the growth rate time unit (day, half-day, quarter-day, hour, minute): ")
    fission_unit1 = input("Enter the fission-event frequency time unit (day, half-day, quarter-day, hour, minute, custom): ")
    if fission_unit1 == "custom":
        fission_events1 = int(input("Enter the number of fission events per growth rate time unit: "))
    else:
        fission_events1 = time_conversion[growth_unit1][fission_unit1]

    # Input for Second Model
    print("Second model:")
    initial_population2 = int(input("Enter the initial population: "))
    growth_rate2 = float(input("Enter the growth rate (enter 7% as 7): "))
    growth_unit2 = input("Enter the growth rate time unit (day, half-day, quarter-day, hour, minute): ")
    fission_unit2 = input("Enter the fission-event frequency time unit (day, half-day, quarter-day, hour, minute, custom): ")
    if fission_unit2 == "custom":
        fission_events2 = int(input("Enter the number of fission events per growth rate time unit: "))
    else:
        fission_events2 = time_conversion[growth_unit2][fission_unit2]

    # Projection Timeframe Input
    projection_time = int(input("Enter the amount of time to project into the future: "))
    projection_unit = input("Enter the projection time unit (day, half-day, quarter-day, hour, minute): ")

    # Calculate and Output Projections
    steps1 = convert_time_units(projection_time, projection_unit, fission_unit1)
    steps2 = convert_time_units(projection_time, projection_unit, fission_unit2)
    sub_growth_rate1 = growth_rate1 / fission_events1
    sub_growth_rate2 = growth_rate2 / fission_events2
    pop1 = initial_population1
    pop2 = initial_population2
    projection1 = [pop1]
    projection2 = [pop2]
    for _ in range(int(steps1)):
        pop1 *= (1 + sub_growth_rate1 / 100)
        projection1.append(pop1)
    for _ in range(int(steps2)):
        pop2 *= (1 + sub_growth_rate2 / 100)
        projection2.append(pop2)
    print("First model projection:", [round(p, 2) for p in projection1])
    print("Second model projection:", [round(p, 2) for p in projection2])


# PART IV: GENERATE MORE DETAILED PROJECTIONS

def display_projections_as_columns():
    # Input
    print("MODULE 5: Keeping track of the of population increase at each fission event")
    initial_population = int(input("Enter the initial population: "))
    growth_rate = float(input("Enter the growth rate (enter 7% as 7): "))
    growth_unit = input("Enter the growth rate time unit (day, half-day, quarter-day, hour, minute): ")
    fission_unit = input("Enter the fission-event frequency time unit (day, half-day, quarter-day, hour, minute, custom): ")
    if fission_unit == "custom":
        fission_events = int(input("Enter the number of fission events per growth rate time unit: "))
    else:
        fission_events = time_conversion[growth_unit][fission_unit]
    population_target = int(input("Enter the population size to project to (enter 0, to specify the amount of time to project for): "))
    if population_target == 0:
        projection_time = int(input("In that case, enter the amount of time to project for: "))
        projection_unit = input("Enter the projection time unit (day, half-day, quarter-day, hour, minute, custom): ")
        steps = convert_time_units(projection_time, projection_unit, fission_unit)
    else:
        steps = float('inf')
    sub_growth_rate = growth_rate / fission_events
    opening_population = []
    num_of_new_bacteria = []
    closing_population = []
    pop = initial_population
    count = 0
    while (population_target == 0 and count < steps) or (population_target > 0 and pop < population_target):
        opening_population.append(round(pop, 2))
        added = pop * sub_growth_rate / 100
        num_of_new_bacteria.append(round(added, 2))
        pop += added
        closing_population.append(round(pop, 2))
        count += 1
    print('column headings: opening, number added, closing')
    for row in zip(opening_population, num_of_new_bacteria, closing_population):
        print(row)

